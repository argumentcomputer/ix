name: CI Jobs

on:
  push:
    branches: main
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lean-jobs:
    strategy:
      matrix:
        os: [warp-ubuntu-latest-x64-8x, warp-macos-latest-arm64-6x]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
      - name: Install GCC on MacOS
        if: contains(matrix.os, 'macos')
        run: |
          /opt/homebrew/bin/gcc-14 --version
          mkdir -p ~/local/bin
          ln -sf /opt/homebrew/bin/gcc-14 ~/local/bin/gcc
          export PATH=~/local/bin:$PATH
          which gcc
      - uses: leanprover/lean-action@v1 # https://github.com/leanprover/lean-action
        with:
          build-args: "--wfail -v"
          test: true
      - run: |
          lake build bench-aiur
          lake build bench-blake3
      - name: Test Ix CLI
        run: |
          mkdir -p ~/.local/bin
          lake test -- cli
      - name: Check lean.h.hash
        run: lake run check-lean-h-hash

  rust-test:
    strategy:
      matrix:
        os: [ubuntu-latest, warp-macos-latest-arm64-6x]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
        with:
          repository: argumentcomputer/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@nextest
      - uses: Swatinem/rust-cache@v2
      - name: Tests
        run: cargo nextest run --release --profile ci --workspace --run-ignored all

  rust-lint:
    strategy:
      matrix:
        os: [ubuntu-latest, warp-macos-latest-arm64-6x]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
        with:
          repository: argumentcomputer/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - name: Check Rustfmt code style
        run: cargo fmt --all --check
      - name: Check *everything* compiles
        run: cargo check --all-targets --all-features --workspace
      - name: Check clippy warnings
        run: cargo xclippy -D warnings
      - name: Get Rust version
        if: contains(matrix.os, 'ubuntu')
        run: |
          echo "RUST_VERSION=$(awk -F '"' '/^channel/ {print $2}' rust-toolchain.toml)" | tee -a $GITHUB_ENV
      - name: Cargo-deny
        if: contains(matrix.os, 'ubuntu')
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          rust-version: ${{ env.RUST_VERSION }}
