

--def testUniv : Ix.Univ := 
--  .max
--    (.imax
--      (.max (.succ (.succ ((.succ (.var (Lean.Name.mkSimple "foo") 2))))) .zero)
--      (.max (.succ (.succ (.var (Lean.Name.mkSimple "bar") 3))) .zero))
--    (.imax
--      (.max (.succ (.succ (.var (Lean.Name.mkSimple "baz") 4))) .zero)
--      (.max (.succ (.succ (.var (Lean.Name.mkSimple "bam") 5))) .zero))
--
--def transportUniv (univ: Ix.Univ): Except TransportError Bool :=
--  match EStateM.run (dematUniv univ) emptyDematState with
--  | .ok ixon stt =>
--    let remat := (ReaderT.run (rematUniv ixon) { meta := stt.meta})
--    match EStateM.run remat emptyRematState with
--    | .ok ix stt => .ok (univ == ix)
--    | .error e stt => .error e
--  | .error e stt => .error e
--
--#eval pure (transportUniv testUniv)
